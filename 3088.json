[
  {
    "identifier": "int2str",
    "statement_type": "function",
    "deps": [],
    "body": "fn int2str(mut n: usize) -> String {\n    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut s = String::new();\n    while n > 0 {\n        s = format!(\"{}{}\", n % 2, s);\n        n /= 2;\n    }\n    s\n}",
    "display_name": "int2str",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "valid_bit_string",
    "statement_type": "function",
    "deps": [],
    "body": "fn valid_bit_string(s: &str) -> bool {\n    s.chars().all(|c| c == '0' || c == '1')\n}",
    "display_name": "valid_bit_string",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "normalize_bit_string",
    "statement_type": "function",
    "deps": [],
    "body": "fn normalize_bit_string(s: &str) -> String {\n    let trimmed = s.trim_start_matches('0');\n    if trimmed.is_empty() {\n        \"0\".to_string()\n    } else {\n        trimmed.to_string()\n    }\n}",
    "display_name": "normalize_bit_string",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "left_shift",
    "statement_type": "function",
    "deps": [],
    "body": "fn left_shift(s: &str, count: usize) -> String {\n    if s == \"0\" {\n        \"0\".to_string()\n    } else {\n        format!(\"{}{}\", s, \"0\".repeat(count))\n    }\n}",
    "display_name": "left_shift",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "sub",
    "statement_type": "function",
    "deps": [
      "normalize_bit_string"
    ],
    "body": "fn sub(s1: &str, s2: &str) -> String {\n    let x = normalize_bit_string(s1);\n    let y = normalize_bit_string(s2);\n\n    if y == \"0\" {\n        return x;\n    }\n    if x == y {\n        return \"0\".to_string();\n    }\n\n    let mut i = x.len() as isize - 1;\n    let mut j = y.len() as isize - 1;\n    let mut borrow = 0;\n    let mut result = String::new();\n\n    while i >= 0 || j >= 0 {\n        let bit_x = if i >= 0 && x.chars().nth(i as usize).unwrap() == '1' { 1 } else { 0 };\n        let bit_y = if j >= 0 && y.chars().nth(j as usize).unwrap() == '1' { 1 } else { 0 };\n        let mut diff = bit_x - bit_y - borrow;\n        if diff < 0 {\n            diff += 2;\n            borrow = 1;\n        } else {\n            borrow = 0;\n        }\n        result.insert(0, if diff == 1 { '1' } else { '0' });\n        i -= 1;\n        j -= 1;\n    }\n\n    normalize_bit_string(&result)\n}",
    "display_name": "sub",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "mul",
    "statement_type": "function",
    "deps": [
      "add",
      "normalize_bit_string",
      "left_shift"
    ],
    "body": "fn mul(s1: &str, s2: &str) -> String {\n    let x = normalize_bit_string(s1);\n    let y = normalize_bit_string(s2);\n\n    if x == \"0\" || y == \"0\" {\n        return \"0\".to_string();\n    }\n\n    let mut product = \"0\".to_string();\n    let mut shift_count = 0;\n\n    for c in y.chars().rev() {\n        if c == '1' {\n            let partial = left_shift(&x, shift_count);\n            product = add(&product, &partial);\n        }\n        shift_count += 1;\n    }\n\n    product\n}",
    "display_name": "mul",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "str2int",
    "statement_type": "function",
    "deps": [],
    "body": "fn str2int(s: &str) -> usize {\n    s.chars().fold(0, |acc, c| acc * 2 + if c == '1' { 1 } else { 0 })\n}",
    "display_name": "str2int",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "main",
    "statement_type": "function",
    "deps": [
      "sub",
      "mul",
      "add",
      "int2str",
      "str2int"
    ],
    "body": "fn main() {\n    println!(\"Examples:\");\n\n    let a = \"1011\"; // 11\n    let b = \"1101\"; // 13\n\n    println!(\"a = {}, (decimal = {})\", a, str2int(a));\n    println!(\"b = {}, (decimal = {})\", b, str2int(b));\n\n    let s = add(a, b);\n    println!(\"a + b = {}, (decimal = {})\", s, str2int(&s));\n\n    let d = sub(b, a);\n    println!(\"b - a = {}, (decimal = {})\", d, str2int(&d));\n\n    let m = mul(a, b);\n    println!(\"a * b = {}, (decimal = {})\", m, str2int(&m));\n\n    let z = \"0\";\n    let sum_z = add(a, z);\n    println!(\"{} + 0 = {}, (decimal = {})\", a, sum_z, str2int(&sum_z));\n\n    let n = 9999;\n    let s_n = int2str(n);\n    println!(\"9999 -> {} -> {}\", s_n, str2int(&s_n));\n}",
    "display_name": "main",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  },
  {
    "identifier": "add",
    "statement_type": "function",
    "deps": [
      "normalize_bit_string"
    ],
    "body": "fn add(s1: &str, s2: &str) -> String {\n    let x = normalize_bit_string(s1);\n    let y = normalize_bit_string(s2);\n    if x == \"0\" {\n        return y;\n    }\n    if y == \"0\" {\n        return x;\n    }\n\n    let mut i = x.len() as isize - 1;\n    let mut j = y.len() as isize - 1;\n    let mut carry = 0;\n    let mut result = String::new();\n\n    while i >= 0 || j >= 0 || carry > 0 {\n        let bit_x = if i >= 0 && x.chars().nth(i as usize).unwrap() == '1' { 1 } else { 0 };\n        let bit_y = if j >= 0 && y.chars().nth(j as usize).unwrap() == '1' { 1 } else { 0 };\n        let sum = bit_x + bit_y + carry;\n        result.insert(0, if sum % 2 == 1 { '1' } else { '0' });\n        carry = sum / 2;\n        i -= 1;\n        j -= 1;\n    }\n\n    normalize_bit_string(&result)\n}",
    "display_name": "add",
    "full_path": "file:///work/3088/RUSTBignumsSofia.rs",
    "relative_path": "RUSTBignumsSofia.rs",
    "file_name": "RUSTBignumsSofia.rs",
    "parent_folder": "3088"
  }
]