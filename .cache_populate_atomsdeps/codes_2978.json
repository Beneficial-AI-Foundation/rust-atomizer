{
  "30580": {
    "text": "        Self(uuid)    }    pub fn service_id_binary(&self) -> Vec<u8> {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub const fn from_uuid_bytes(bytes: [u8; 16]) -> Self {\r\n        Self::from_uuid(uuid::Uuid::from_bytes(bytes))    }    fn accepts_ios_system_story_aci() {        state.write(self.0.as_bytes());    }    fn ordering_consistency() {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {        write!(f, \"<{}:{}>\", self.kind(), self.raw_uuid())    }    pub fn to_protocol_address(&self, device_id: DeviceId) -> ProtocolAddress {\r\n        ProtocolAddress::new(self.service_id_string(), device_id)    }    pub fn parse_from_service_id_string(input: &str) -> Option<Self> {        fn try_parse_hyphenated(input: &str) -> Option<Uuid> {\r\n            // uuid::Uuid supports multiple UUID formats; we only want to support the \"hyphenated\"\r\n            // form.\r\n            if input.len() != uuid::fmt::Hyphenated::LENGTH {\r\n                return None;\r\n            }\r\n            Uuid::try_parse(input).ok()\r\n        }        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {        Self::from_uuid(uuid::Uuid::from_bytes(bytes))    }    fn accepts_ios_system_story_aci() {        state.write(self.0.as_bytes());    }    fn ordering_consistency() {\r\n        proptest!(|(    }    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {        &self.name        }    }    fn eq(&self, other: &ServiceId) -> bool {\r\n        ServiceId::from(*self) == *other    }    pub fn parse_from_service_id_fixed_width_binary(        }    }    fn rejects_invalid_binary_lengths() {        Self::from_uuid(value)    }    pub fn device_id(&self) -> DeviceId {        }    }    fn conversions() {\r\n        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    fn try_from(value: ServiceId) -> Result<Self, Self::Error> {    }    fn round_trip_service_id_fixed_width_binary() {        });    }    fn rejects_invalid_uuid_strings() {    }    fn round_trip_test<SerializedOwned, SerializedBorrowed>(\r\n        uuid: Uuid,        let mut result = [0; 17];    }    fn logging() {        ServiceId::from(*self) == *other    }    pub fn parse_from_service_id_fixed_width_binary(\r\n        bytes: &ServiceIdFixedWidthBinaryBytes,        }        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {\r\n        ProtocolAddress { name, device_id }    }    fn ordering() {    }    }    pub fn service_id_string(&self) -> String {        Self::from_uuid(uuid::Uuid::from_bytes(bytes))    }    fn accepts_ios_system_story_aci() {        state.write(self.0.as_bytes());    }    fn ordering_consistency() {\r\n        proptest!(|(    }    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {        ProtocolAddress { name, device_id }    }    fn ordering() {    }    }    pub fn service_id_string(&self) -> String {\r\n        if let Self::Aci(aci) = self {\r\n            aci.0.to_string()\r\n        } else {\r\n            format!(\"{}:{}\", self.kind(), self.raw_uuid())\r\n        }    }    fn conversions() {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    fn try_from(value: ServiceId) -> Result<Self, Self::Error> {    }    fn round_trip_service_id_fixed_width_binary() {\r\n        proptest!(|(uuid_bytes: [u8; 16])| {\r\n            let uuid = Uuid::from_bytes(uuid_bytes);\r\n            round_trip_test(\r\n                uuid,\r\n                ServiceId::service_id_fixed_width_binary,\r\n                Aci::service_id_fixed_width_binary,\r\n                Pni::service_id_fixed_width_binary,\r\n                ServiceId::parse_from_service_id_fixed_width_binary,\r\n                Aci::parse_from_service_id_fixed_width_binary,\r\n                Pni::parse_from_service_id_fixed_width_binary,\r\n                &array_prepend(0x00, uuid.as_bytes()),\r\n                &array_prepend(0x01, uuid.as_bytes()),\r\n            );\r\n        });        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    fn try_from(value: ServiceId) -> Result<Self, Self::Error> {    }    fn round_trip_service_id_fixed_width_binary() {\r\n        proptest!(|(uuid_bytes: [u8; 16])| {\r\n            let uuid = Uuid::from_bytes(uuid_bytes);\r\n            round_trip_test(\r\n                uuid,\r\n                ServiceId::service_id_fixed_width_binary,\r\n                Aci::service_id_fixed_width_binary,\r\n                Pni::service_id_fixed_width_binary,\r\n                ServiceId::parse_from_service_id_fixed_width_binary,\r\n                Aci::parse_from_service_id_fixed_width_binary,\r\n                Pni::parse_from_service_id_fixed_width_binary,\r\n                &array_prepend(0x00, uuid.as_bytes()),\r\n                &array_prepend(0x01, uuid.as_bytes()),\r\n            );\r\n        });        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {        }    }    fn rejects_invalid_binary_lengths() {        });    }    pub fn raw_uuid(self) -> Uuid {\r\n        match self {\r\n            ServiceId::Aci(aci) => aci.into(),\r\n            ServiceId::Pni(pni) => pni.into(),\r\n        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {        &self.name    }    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {        ProtocolAddress::new(self.service_id_string(), device_id)    }    pub fn parse_from_service_id_string(input: &str) -> Option<Self> {        fn try_parse_hyphenated(input: &str) -> Option<Uuid> {\r\n            // uuid::Uuid supports multiple UUID formats; we only want to support the \"hyphenated\"\r\n            // form.\r\n            if input.len() != uuid::fmt::Hyphenated::LENGTH {\r\n                return None;\r\n            }\r\n            Uuid::try_parse(input).ok()\r\n        }        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {        proptest!(|(    }    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {\r\n        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {        write!(f, \"<{}:{}>\", self.kind(), self.raw_uuid())    }    pub fn to_protocol_address(&self, device_id: DeviceId) -> ProtocolAddress {        }        self.device_id    }    pub fn parse_from_service_id_binary(bytes: &[u8]) -> Option<Self> {\r\n        match bytes.len() {\r\n            16 => Some(Self::Aci(Uuid::from_slice(bytes).ok()?.into())),\r\n            17 => {\r\n                let result = Self::parse_from_service_id_fixed_width_binary(\r\n                    bytes.try_into().expect(\"already measured\"),\r\n                )?;\r\n                if result.kind() == ServiceIdKind::Aci {\r\n                    // The ACI is unmarked in the standard binary format, so this is an error.\r\n                    None\r\n                } else {\r\n                    Some(result)\r\n                }\r\n            }\r\n            _ => None,\r\n        }    }    fn array_prepend(tag: u8, uuid_bytes: &[u8; 16]) -> [u8; 17] {        });    }    fn rejects_invalid_uuid_strings() {        }    }    fn rejects_invalid_binary_lengths() {        });    }    pub fn raw_uuid(self) -> Uuid {\r\n        match self {\r\n            ServiceId::Aci(aci) => aci.into(),\r\n            ServiceId::Pni(pni) => pni.into(),\r\n        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {        &self.name    }    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {        }    }    fn array_prepend(tag: u8, uuid_bytes: &[u8; 16]) -> [u8; 17] {        });    }    fn rejects_invalid_uuid_strings() {\r\n        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {        }    }    fn from(value: Uuid) -> Self {    }    fn round_trip_service_id_binary() {\r\n        proptest!(|(uuid_bytes: [u8; 16])| {\r\n            let uuid = Uuid::from_bytes(uuid_bytes);\r\n            round_trip_test(\r\n                uuid,\r\n                ServiceId::service_id_binary,\r\n                Aci::service_id_binary,\r\n                Pni::service_id_binary,\r\n                ServiceId::parse_from_service_id_binary,\r\n                Aci::parse_from_service_id_binary,\r\n                Pni::parse_from_service_id_binary,\r\n                uuid.as_bytes(),\r\n                &array_prepend(0x01, uuid.as_bytes()),\r\n            );\r\n        });        proptest!(|(    }    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {\r\n        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {        write!(f, \"<{}:{}>\", self.kind(), self.raw_uuid())    }    pub fn to_protocol_address(&self, device_id: DeviceId) -> ProtocolAddress {        ProtocolAddress { name, device_id }    }    fn ordering() {    }    }    pub fn service_id_string(&self) -> String {\r\n        if let Self::Aci(aci) = self {\r\n            aci.0.to_string()\r\n        } else {\r\n            format!(\"{}:{}\", self.kind(), self.raw_uuid())\r\n        }    }    fn conversions() {        });        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {\r\n        let mut result = [0; 17];    }    fn logging() {        ServiceId::from(*self) == *other    }    pub fn parse_from_service_id_fixed_width_binary(        }    }    pub fn service_id_fixed_width_binary(&self) -> ServiceIdFixedWidthBinaryBytes {        &self.name    }    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\r\n        state.write(self.0.as_bytes());    }    fn ordering_consistency() {    }    pub fn parse_from_service_id_fixed_width_binary(    }    fn round_trip_service_id_string() {        }    }    fn conversions() {        let mut result = [0; 17];    }    fn logging() {        ServiceId::from(*self) == *other    }    pub fn parse_from_service_id_fixed_width_binary(\r\n        bytes: &ServiceIdFixedWidthBinaryBytes,    }    pub fn kind(&self) -> ServiceIdKind {\r\n        match self {\r\n            ServiceId::Aci(_) => ServiceIdKind::Aci,\r\n            ServiceId::Pni(_) => ServiceIdKind::Pni,\r\n        }        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    fn case_insensitive() {        Self(uuid)    }    pub fn service_id_binary(&self) -> Vec<u8> {\r\n        if let Self::Aci(aci) = self {\r\n            aci.0.as_bytes().to_vec()\r\n        } else {\r\n            self.service_id_fixed_width_binary().to_vec()\r\n        }    }    fn rejects_invalid_binary_lengths() {        });    }    pub fn raw_uuid(self) -> Uuid {    }    }    pub fn service_id_string(&self) -> String {        let mut result = [tag; 17];    }    const fn from_uuid(uuid: Uuid) -> Self {\r\n        Self(uuid)    }    pub fn service_id_binary(&self) -> Vec<u8> {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub const fn from_uuid_bytes(bytes: [u8; 16]) -> Self {        Self(uuid)    }    pub fn service_id_binary(&self) -> Vec<u8> {        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub const fn from_uuid_bytes(bytes: [u8; 16]) -> Self {\r\n        Self::from_uuid(uuid::Uuid::from_bytes(bytes))    }    fn accepts_ios_system_story_aci() {        state.write(self.0.as_bytes());    }    fn ordering_consistency() {        ProtocolAddress::new(self.service_id_string(), device_id)    }    pub fn parse_from_service_id_string(input: &str) -> Option<Self> {        fn try_parse_hyphenated(input: &str) -> Option<Uuid> {\r\n            // uuid::Uuid supports multiple UUID formats; we only want to support the \"hyphenated\"\r\n            // form.\r\n            if input.len() != uuid::fmt::Hyphenated::LENGTH {\r\n                return None;\r\n            }\r\n            Uuid::try_parse(input).ok()\r\n        }        let uuid = uuid::uuid!(\"8c78cd2a-16ff-427d-83dc-1a5e36ce713d\");    }    pub fn new(name: String, device_id: DeviceId) -> Self {    }    pub fn name(&self) -> &str {\r\n        &self.name        }    }    fn array_prepend(tag: u8, uuid_bytes: &[u8; 16]) -> [u8; 17] {        });    }    fn rejects_invalid_uuid_strings() {\r\n        assert!(ServiceId::parse_from_service_id_string(\"\").is_none());    }    fn rejects_invalid_types() {        }    }    fn from(value: Uuid) -> Self {    }    pub fn parse_from_service_id_fixed_width_binary(    }    fn round_trip_service_id_string() {        }    }    fn array_prepend(tag: u8, uuid_bytes: &[u8; 16]) -> [u8; 17] {\r\n        let mut result = [tag; 17];    }    const fn from_uuid(uuid: Uuid) -> Self {    }    pub fn kind(&self) -> ServiceIdKind {    }    fn from(value: Uuid) -> Self {\r\n        Self::from_uuid(value)",
    "filename": "test.rs",
    "filepath": null,
    "folder_id": null,
    "user_id": 460154
  }
}