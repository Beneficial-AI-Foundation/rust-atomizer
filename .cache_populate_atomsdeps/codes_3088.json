{
  "40217": {
    "text": "fn int2str(mut n: usize) -> String {\r\n    if n == 0 {\r\n        return \"0\".to_string();\r\n    }\r\n    let mut s = String::new();\r\n    while n > 0 {\r\n        s = format!(\"{}{}\", n % 2, s);\r\n        n /= 2;\r\n    }\r\n    s\r\n}\r\n\r\nfn str2int(s: &str) -> usize {\r\n    s.chars().fold(0, |acc, c| acc * 2 + if c == '1' { 1 } else { 0 })\r\n}\r\n\r\nfn valid_bit_string(s: &str) -> bool {\r\n    s.chars().all(|c| c == '0' || c == '1')\r\n}\r\n\r\nfn normalize_bit_string(s: &str) -> String {\r\n    let trimmed = s.trim_start_matches('0');\r\n    if trimmed.is_empty() {\r\n        \"0\".to_string()\r\n    } else {\r\n        trimmed.to_string()\r\n    }\r\n}\r\n\r\nfn left_shift(s: &str, count: usize) -> String {\r\n    if s == \"0\" {\r\n        \"0\".to_string()\r\n    } else {\r\n        format!(\"{}{}\", s, \"0\".repeat(count))\r\n    }\r\n}\r\n\r\nfn add(s1: &str, s2: &str) -> String {\r\n    let x = normalize_bit_string(s1);\r\n    let y = normalize_bit_string(s2);\r\n    if x == \"0\" {\r\n        return y;\r\n    }\r\n    if y == \"0\" {\r\n        return x;\r\n    }\r\n\r\n    let mut i = x.len() as isize - 1;\r\n    let mut j = y.len() as isize - 1;\r\n    let mut carry = 0;\r\n    let mut result = String::new();\r\n\r\n    while i >= 0 || j >= 0 || carry > 0 {\r\n        let bit_x = if i >= 0 && x.chars().nth(i as usize).unwrap() == '1' { 1 } else { 0 };\r\n        let bit_y = if j >= 0 && y.chars().nth(j as usize).unwrap() == '1' { 1 } else { 0 };\r\n        let sum = bit_x + bit_y + carry;\r\n        result.insert(0, if sum % 2 == 1 { '1' } else { '0' });\r\n        carry = sum / 2;\r\n        i -= 1;\r\n        j -= 1;\r\n    }\r\n\r\n    normalize_bit_string(&result)\r\n}\r\n\r\nfn sub(s1: &str, s2: &str) -> String {\r\n    let x = normalize_bit_string(s1);\r\n    let y = normalize_bit_string(s2);\r\n\r\n    if y == \"0\" {\r\n        return x;\r\n    }\r\n    if x == y {\r\n        return \"0\".to_string();\r\n    }\r\n\r\n    let mut i = x.len() as isize - 1;\r\n    let mut j = y.len() as isize - 1;\r\n    let mut borrow = 0;\r\n    let mut result = String::new();\r\n\r\n    while i >= 0 || j >= 0 {\r\n        let bit_x = if i >= 0 && x.chars().nth(i as usize).unwrap() == '1' { 1 } else { 0 };\r\n        let bit_y = if j >= 0 && y.chars().nth(j as usize).unwrap() == '1' { 1 } else { 0 };\r\n        let mut diff = bit_x - bit_y - borrow;\r\n        if diff < 0 {\r\n            diff += 2;\r\n            borrow = 1;\r\n        } else {\r\n            borrow = 0;\r\n        }\r\n        result.insert(0, if diff == 1 { '1' } else { '0' });\r\n        i -= 1;\r\n        j -= 1;\r\n    }\r\n\r\n    normalize_bit_string(&result)\r\n}\r\n\r\nfn mul(s1: &str, s2: &str) -> String {\r\n    let x = normalize_bit_string(s1);\r\n    let y = normalize_bit_string(s2);\r\n\r\n    if x == \"0\" || y == \"0\" {\r\n        return \"0\".to_string();\r\n    }\r\n\r\n    let mut product = \"0\".to_string();\r\n    let mut shift_count = 0;\r\n\r\n    for c in y.chars().rev() {\r\n        if c == '1' {\r\n            let partial = left_shift(&x, shift_count);\r\n            product = add(&product, &partial);\r\n        }\r\n        shift_count += 1;\r\n    }\r\n\r\n    product\r\n}\r\n\r\nfn main() {\r\n    println!(\"Examples:\");\r\n\r\n    let a = \"1011\"; // 11\r\n    let b = \"1101\"; // 13\r\n\r\n    println!(\"a = {}, (decimal = {})\", a, str2int(a));\r\n    println!(\"b = {}, (decimal = {})\", b, str2int(b));\r\n\r\n    let s = add(a, b);\r\n    println!(\"a + b = {}, (decimal = {})\", s, str2int(&s));\r\n\r\n    let d = sub(b, a);\r\n    println!(\"b - a = {}, (decimal = {})\", d, str2int(&d));\r\n\r\n    let m = mul(a, b);\r\n    println!(\"a * b = {}, (decimal = {})\", m, str2int(&m));\r\n\r\n    let z = \"0\";\r\n    let sum_z = add(a, z);\r\n    println!(\"{} + 0 = {}, (decimal = {})\", a, sum_z, str2int(&sum_z));\r\n\r\n    let n = 9999;\r\n    let s_n = int2str(n);\r\n    println!(\"9999 -> {} -> {}\", s_n, str2int(&s_n));\r\n}",
    "filename": "RUSTBignumsSofia.rs",
    "filepath": null,
    "folder_id": null,
    "user_id": 460160
  }
}